/*
* Basic Python example with distributed python
* Load a module, execute a function with two arguments and display the result
* The Python environment is provided in 'dist' directory.
* When it's no provided an exception will be thrown with a message similar to:
* Python path configuration:
  PYTHONHOME = 'dist'
  PYTHONPATH = (not set)
  program name = 'python3'
  isolated = 0
  environment = 1
  user site = 1
  safe_path = 0
  import site = 1
  is in build tree = 0
  stdlib dir = 'dist/lib/python3.11'
  sys._base_executable = '/usr/bin/python3'
  sys.base_prefix = 'dist'
  sys.base_exec_prefix = 'dist'
  sys.platlibdir = 'lib'
  sys.executable = '/usr/bin/python3'
  sys.prefix = 'dist'
  sys.exec_prefix = 'dist'
  sys.path = [
    'dist/lib/python311.zip',
    'dist/lib/python3.11',
    'dist/lib/python3.11/lib-dynload',
  ]
*
* In order to provide own Python distribution it is required to supply following entities:
* - Python library placed in system's lookup path, preferably the same path as the application's directory
*   > On Linux it's typically /usr/lib/x86_64-linux-gnu/libpythonX.YY.so (or similar)
*   > On Windows it's typically %localappdata%/Python/PythonXYY/pythonXYY.dll
* - Python's lib directory containing Python modules (.py files)
*   > On Linux it's typically /lib/pythonX.YY directory
*   > On Windows it'h typically %localappdata%/Python/PythonXYY/lib directory
* - Python's shared library directory
*   > On Linux it's typically /lib/pythonX.YY/lib-dynload
*   > On Windows it's typically %localappdata%/Python/PythonXYY/DLLs
* - Optionally (but recommended) Python's binaries
*   > On Linux pythonX.YY and pip in /usr/bin directory
*   > On Windows typically located in %localappdata%/Python/PythonXYY: python.exe, and pip.exe located in Scripts subdirectory
*
* The Python environment is not provided by default, in order to use this example, use the script to install the environment first
*
* If client application is to be shipped with preprovided third-party packages, it is required to install those packages during client application's installation, first launch or other means. Third party packages may be provided in the form of Python wheel files, downloaded from pypi service and shipped with the client application according the the license.
* In order to simplify distribution of third party libraries, a set of scripts was provided to 1. obtain specified libraries and 2. install them in specified directory
*/

#pragma once

#include "common.h"
#include "pythondefs.h"

// Include all-in-one PythonCPP header
#include <pythoncpp/PythonCpp.h>

#include <iostream>
#include <cstdlib>

struct DistributedExample : public IExample
{
	virtual std::string getExampleName() const override { return "Distributed Python example"; }
	virtual void run()
	{
		try
		{
			std::string pydir = getPythonDirectory();
			std::string distdir = getDistDirectory();
			std::string pythonhome = distdir + "/lib/python3.11";

			Python::Initializer::getDefaultInitializer().setHome(Python::pythonhome);

			// Create Python instance
			// Uses paths generated by installpython.py script
			Python::Python py;
			py.setPath(pydir);
			py.appendPath(Python::pythonhome);
			for(const auto& path : Python::pythondirs)
			{
				py.appendPath(std::string(path));
			}

			// Load the module
			Python::Module third_party_example = py.loadModule("third_party_example");

			// Get a function from the module
			Python::Function testthirdparty = third_party_example.getFunction("testthirdparty");

			std::cout << "Calling \"" << testthirdparty.getName() << "\" function." << std::endl << std::endl;

			// Call the function
			testthirdparty();
		}
		catch (const std::exception& ex)
		{
			std::cout << "Error:" << std::endl;
			std::cout << ex.what() << std::endl;
		}

	}
};
